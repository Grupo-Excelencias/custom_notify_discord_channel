<?php
/**
 * @file
 * Contains custom_notify_discord_channel.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\custom_notify_discord_channel\Event\NodeInsertNotifyDiscordChannelEvent;

/*use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Link;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Cookie;
use Drupal\node\Entity\Node;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Url;
use Drupal\user\Entity\User;*/

/**
 * Implements hook_help().
 */
function custom_notify_discord_channel_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.page.custom_notify_discord_channel':
      $output = '';
      $output .= '<p>' . t('This module allows you to send notifications, when an event with a type of content occurs, to a channel on the Discord platform.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Respond to creation of a new entity.
 *
 * This hook runs once the entity has been stored. Note that hook
 * implementations may not alter the stored entity data.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 *
 * @ingroup entity_crud
 * @see hook_ENTITY_TYPE_insert()
 */
function custom_notify_discord_channel_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {

  //if($entity->get('status')->value === 1) {

  if ($entity->getEntityType()->id() == 'node') {

    $config = \Drupal::config('custom_notify_discord_channel.adminsettings');

    if ($config->get("custom_notify_discord_channel_activate")) {

      if ($config->get('custom_notify_discord_channel_' . $entity->bundle() . '_create')) {

        $moduleHandler = \Drupal::service('module_handler');
        if ($moduleHandler->moduleExists('pathauto')) { //if pathauto module is enable
          \Drupal::service('pathauto.generator')->updateEntityAlias($entity, 'insert'); //this function create the alias to an entity with the pathauto module
        }

        // Dispatch the node insert demo event so that subscribers can act accordingly.
        \Drupal::service('event_dispatcher')->dispatch(new NodeInsertNotifyDiscordChannelEvent($entity), NodeInsertNotifyDiscordChannelEvent::NOTIFY_DISCORD_CHANNEL_NODE_INSERT);

      }

    }
  }

  //}

}

